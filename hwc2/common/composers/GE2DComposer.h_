/*
// Copyright(c) 2016 Amlogic Corporation
*/

#ifndef GE2D_COMPOSER_H
#define GE2D_COMPOSER_H

#include <utils/KeyedVector.h>
#include <SimpleThread.h>
#include <Composers.h>

#include <ge2d/include_aml/ge2d_port.h>
#include <ge2d/include_aml/ge2d.h>
// #include <ge2d/aml_ge2d.h>

namespace android {
namespace amlogic {

class IDisplayDevice;

class GE2DComposer : public Composers {
public:
    GE2DComposer(IDisplayDevice& disp);
    virtual ~GE2DComposer();

public:
    typedef Vector< Vector< hwc2_layer_t > > Fifo;

    virtual bool initialize(framebuffer_info_t* fbInfo);
    virtual void deinitialize();
    virtual const char* getName() const;
    virtual int32_t startCompose(Vector< hwc2_layer_t > hwcLayers, int32_t *offset = 0);
    virtual void setCurGlesFbSlot(uint32_t slot);
    virtual const uint32_t getFbSlot();

private:
    uint32_t findFreeFbSlot();
    void runGE2DProcess(HwcLayer* hwcLayer1, HwcLayer* hwcLayer2);
    void directMemcpy(Fifo::iterator front); // test.

    IDisplayDevice& mDisplayDevice;
    const char* mName;

    // mQueue is a FIFO of queued work used in synchronous mode.
    Fifo mQueue;

    // Fence.
    int32_t mSyncTimelineFd;
    uint32_t mCurrentSyncTime;

    int32_t mBufferMask;
    int32_t mNumBuffers;
    int32_t mFbSlot;
    int32_t mCurGlesFbSlot;
    framebuffer_info_t* mFbInfo;
    int32_t mSingleFbSize;
    buffer_handle_t mGe2dBufHnd;

    // ge2d target buffer info.
    // buffer_info_t *mTargetBufferInfo;
    // ge2d src buffer info.
    aml_ge2d_info_t *mSrcBufferInfo;

    int32_t mDevice;
    mutable Mutex mLock;
    Condition mCondition;
    bool mExitThread;
    bool mInitialized;

private:
    DECLARE_THREAD(GE2DRenderThread, GE2DComposer);
};

} // namespace amlogic
} // namespace android



#endif /* GE2D_COMPOSITOR_H */

